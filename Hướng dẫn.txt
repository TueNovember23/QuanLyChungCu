clone về từ https://github.com/TueNovember23/QuanLyChungCu.git
chạy file SQL.sql trong thư mục gốc để tạo db
Mở project
chuyển sang nhánh dev bằng giao diện hoặc mở power shell trong visual studio chạy lệnh
git checkout dev

Các package cơ bản đã có sẵn để dùng, không được tự ý cài package, muốn cài phải báo cả nhóm
Không được code, push, merge hay thay đổi bất kỳ cái gì trong nhánh main
Không được code trong nhánh dev mà phải tạo nhánh từ nhánh dev, code xong mới merge lại vào dev

Code rude: hạn chế sử dụng var
Đặt tên dễ hiểu, logic
Loại bỏ các using k dùng (CTRL + R + G)
Các biến private trong lớp thì đặt tên thêm dấu _ phía trước

Có 3 tầng:
GUI cho giao diện: chứa các giao diện wpf, code theo mô hình mvvm, dùng package Community.ToolKit.MVVM -- Từ viewmodel gọi xuống service để xử lý nghiệp vụ

Services cho xử lý nghiệp vụ: thực hiện xử lý nghiệp vụ (ví dụ như đăng nhập, tạo căn hộ mới, lấy thông tin căn hộ, ...) -- Gọi xuống Repository để làm việc với db

Repository cho kết nối dữ liệu: chứa các entity, dbcontext. đã cấu hình xong chỉ cần gọi lên xài

Luồng từ GUI -> Service -> Repository, không được gọi ngược lại hoặc gọi trực tiếp từ GUI xuống reposiory

Giữa GUI và service giao tiếp qua DTO, giữa service và repo giao tiếp qua các entity

Trong quá trình code nếu cần quăng lỗi hiện thông báo lên màn hình (ví dụ đăng nhập sai) thì quăng lỗi BussinessException trong lớp core, lỗi sẽ tự hiển thị (hiện tại đang show bằng message box, sau này tạo giao diện sau)

Luồng code:

Tầng repo cấu hình xong hết rồi, mỗi lần muốn thực hiện thao tác gì thì gọi từ unitOfWork.Repository<entity cần làm việc>(). phương thức muốn làm việc
Có đủ CRUD cơ bản, nếu muốn truy vấn phức tạp hơn thì dùng Entities (này chứa dbset cho phép dùng linq để xử lý)

Trong service chứa các xử lý nghiệp vụ, cần tạo 1 interface và lớp triển khai để dùng Dependency Injection (nói sau): ví dụ làm việc với căn hộ thì tạo 1 interface IApartmentService, sau đó tạo ApartmentService, trong đó sẽ viết tất các các nghiệp vụ cần làm với căn hộ ví dụ như CRUD

DTO dùng để ẩn bớt thông tin, ví dụ 1 account có tk, mk và role, khi trả về thông tin của 1 account thì không trả mật khẩu nên phải tạo 1 DTO response accoutn chỉ chứa tk, role
Tạo DTO theo nhu cầu trong Services.DTOs: tạo thư mục con cho nhóm DTO (ví dụ requestLoginDTO, responseLoginDTO cho vào 1 nhóm) -> tạo DTO
Thuộc tính DTO đặt tên giống với thuộc tính của entity tương ứng để dùng automapper
ví dụ: khi đăng nhập chỉ truyền tài khoản, mật khẩu -> tạo 1 DTO chứ 2 thuộc tính này
       khi trả người dùng về không trả mật khẩu nên tạo DTO response chỉ chứa username và password chứ không chứ mật khẩu
ví dụ khi tạo DTO cho apartment:
b1: tạo thư mục ApartmentDTO
b2: tạo các class DTO tương ứng như CreateApartmentDTO (chỉ chứa các thông tin người dùng cần biết khi tạo) (có thể tạo thêm phương thức valid trong DTO để xác minh nếu cần thiết, tham khảo valid trong LoginRequestDTO)
    ResponsePartmentDTO chứa các thông tin cần hiển thị trên giao diện

Đăng ký mapper profile để tự động chuyển đổi từ DTO sang entity và ngược lại trong Services.MapperProfile
ví dụ khi lấy thông tin người dùng -> service gọi repo -> repo trả về 1 account -> service chuyển account sang DTO để ẩn thông tin sau đó trả về giao diện
=> cần tạo mapper để tự động chuyển đổi
ví dụ tạo mapper:
b1: tạo lớp profile kế thừa từ Profile (xem tham khảo UserProfile)
b2: tạo hàm khởi tạo lớp profile, trong đó viết tạo map bằng CreateMap<Lớp bị chuyển đổi, Lớp trả về>(); => chỉ chuyển đổi 1 chiều từ lớp bị đổi sang lớp trả về
    có thể dùng reateMap<Lớp bị chuyển đổi, Lớp trả về>().Reverse() để có thể chuyển 2 chiều

Tạo service để xử lý nghiệp vụ trong Services
Ví dụ có chức năng quản lý căn hộ -> tạo 1 services quản lý căn hộ chứa những nghiệp vụ như CRUD
Cần tạo 1 Interface -> triển khai trong service (interface nằm trong Services.Interfaces, lớp triển khai viết trong Services.Services)
trong triển khai cần tạo 1 IUnitOfWork để lấy các Repo và IMapper để dùng automapper (nếu cần) (tham khảo LoginService)
viết trong hàm khởi tạo
viết các phương thức để lớp giao diện dùng (cái nào giao diện dùng thì trong interface phải khai báo)
nếu có chỉnh sửa dữ liệu (CUD) thì cuối cùng phải gọi _unitOfWork.SaveAsync(); để lưu lại vào db)

Thực hiện đăng ký các service và các viewmodel cần thiết đã tạo trong ServiceRegistration.cs trong GUI (GPT có kêu đăng ký mapper thì khỏi vì cấu hình đăng ký tự động rồi)
Đăng ký ở đây, dùng AddScoped<cái cần đăng ký()
public static void AddViewModels(IServiceCollection services)
{
    services.AddScoped<LoginViewModel>();
}

public static void AddServices(IServiceCollection services)
{
    services.AddScoped<ILoginService, LoginService>();
}

Giao diện viết theo mvvm, có cài sẵn package rồi để viết cho nhanh (Community.ToolKit.MVVM, hỏi gpt nếu k biết dùng)
tạo view model trong Forms.ViewModels, tạo trong thư mục theo role tương ứng
trong viewmodel sẽ khai báo 1 interface service của nó (ví dụ trang login khai báo ILoginService) để dùng service
viết các command, databinding... (hỏi gpt dùng Community.ToolKit.MVVM)
trong lớp code behind của page, gán viewmodel cho trang như ví dụ dưới đây (phải đăng ký rồi mới gán được)
DataContext = App.ServiceProvider?.GetService<LoginViewModel>();
Các User control nếu cần thì viết trong Forms.UserControls

Project core viết những cái cần dùng chung cho cả 3 dự án


1. GUI
* Forms - Thư mục chứa các thành phần giao diện của ứng dụng, được chia thành các phần nhỏ hơn như ViewModels và Views để phân tách logic và giao diện người dùng.
  * Dependencies - Thư mục chứa các thư viện và tài nguyên phụ thuộc cho phần giao diện.
  * UserControls - Thư mục chứa các điều khiển tùy chỉnh (custom controls) được sử dụng trong các form, giúp tái sử dụng các thành phần giao diện và giảm thiểu mã lặp lại.
  * ViewModels - Thư mục chứa các lớp ViewModel theo mô hình MVVM (Model-View-ViewModel), đảm nhận việc xử lý logic và dữ liệu cho từng View tương ứng, giúp phân tách giữa giao diện và logic xử lý.
    * Accountant - ViewModel cho phần giao diện của kế toán.
    * AdministrativeStaff - ViewModel cho phần giao diện của nhân viên hành chính.
    * ServiceSupervisor - ViewModel cho phần giao diện của giám sát viên dịch vụ.
    * LoginViewModel.cs - ViewModel cho phần giao diện đăng nhập, xử lý logic đăng nhập và tương tác dữ liệu với dịch vụ đăng nhập.
  * Views - Thư mục chứa các lớp giao diện (View) cho ứng dụng, là các cửa sổ hoặc màn hình người dùng tương tác.
    * Accountant - Giao diện cho phần của kế toán.
    * AdministrativeStaff - Giao diện cho phần của nhân viên hành chính.
    * ServiceSupervisor - Giao diện cho phần của giám sát viên dịch vụ.
    * LoginView.xaml - Giao diện đăng nhập, định nghĩa layout và các thành phần giao diện cho việc đăng nhập.
    * LoginView.xaml.cs - Lớp code-behind cho LoginView.xaml, chứa các sự kiện và logic liên quan đến giao diện đăng nhập.
* App.config - File cấu hình của ứng dụng, chứa các thiết lập và cài đặt cần thiết cho toàn bộ ứng dụng (ví dụ: cấu hình kết nối cơ sở dữ liệu, các biến môi trường).
* App.xaml - File XAML chính của ứng dụng, thường định nghĩa các resource toàn cục và khởi tạo ứng dụng.
  * App.xaml.cs - Code-behind của App.xaml, chứa logic khởi tạo và các sự kiện ứng dụng (application-level events).
* AssemblyInfo.cs - File chứa các thông tin về assembly, chẳng hạn như phiên bản, bản quyền, và các thuộc tính khác của dự án.
* ServiceRegistration.cs - Lớp chịu trách nhiệm đăng ký các dịch vụ trong ứng dụng, thường sử dụng để cấu hình Dependency Injection, giúp các dịch vụ sẵn sàng được sử dụng ở các phần khác trong dự án.
2. Services
* Services - Thư mục chứa các lớp và dịch vụ liên quan đến logic xử lý nghiệp vụ.
  * Dependencies - Thư mục chứa các thư viện hoặc thành phần phụ thuộc cần thiết cho các dịch vụ.
  * DTOs (Data Transfer Objects) - Thư mục chứa các lớp dùng để truyền dữ liệu giữa các lớp dịch vụ và lớp giao diện hoặc controller.
    * LoginDTO - Thư mục con chứa các lớp DTO cho chức năng đăng nhập.
      * LoginRequestDTO.cs - DTO cho yêu cầu đăng nhập, chứa thông tin từ người dùng gửi lên.
      * LoginResponseDTO.cs - DTO cho phản hồi đăng nhập, chứa thông tin phản hồi từ server.
  * Interfaces - Thư mục chứa các interface (giao diện) để định nghĩa các phương thức mà các lớp dịch vụ phải triển khai, giúp giảm phụ thuộc và dễ dàng thay thế hoặc mở rộng dịch vụ.
    * AccountantServices - Interface cho các dịch vụ liên quan đến kế toán.
    * AdministrativeStaffServices - Interface cho các dịch vụ dành cho nhân viên hành chính.
    * ServiceSupervisorServices - Interface cho các dịch vụ của giám sát dịch vụ.
    * SharedServices - Interface cho các dịch vụ dùng chung.
      * ILoginService.cs - Interface cho dịch vụ đăng nhập.
  * MapperProfile - Thư mục chứa các cấu hình AutoMapper, dùng để ánh xạ (map) dữ liệu giữa các lớp (chẳng hạn từ DTO sang Entity).
    * UserProfile.cs - Cấu hình ánh xạ cho đối tượng người dùng.
  * Services - Thư mục chứa các lớp triển khai các interface trong `Interfaces`, thực hiện các logic xử lý nghiệp vụ cụ thể.
    * AccountantServices - Triển khai dịch vụ cho kế toán.
    * AdministrativeStaffServices - Triển khai dịch vụ cho nhân viên hành chính.
    * ServiceSupervisorServices - Triển khai dịch vụ cho giám sát viên dịch vụ.
    * SharedServices - Triển khai các dịch vụ dùng chung.
      * LoginService.cs - Dịch vụ đăng nhập, thực hiện logic liên quan đến quá trình xác thực người dùng.
3. Repositories
* Repositories - Thư mục chứa các lớp và giao diện để làm việc với cơ sở dữ liệu, sử dụng mô hình Repository và Unit of Work để quản lý truy cập dữ liệu.
  * Dependencies - Thư mục chứa các thư viện hoặc thành phần phụ thuộc cần thiết cho các repository.
  * Base - Thư mục chứa các lớp cơ bản cần thiết cho việc truy xuất dữ liệu.
    * ApplicationDbContext.cs - Lớp chứa ngữ cảnh cơ sở dữ liệu (DbContext), quản lý kết nối và tương tác với cơ sở dữ liệu.
  * Entities - Thư mục chứa các lớp đại diện cho bảng trong cơ sở dữ liệu (entity).
  * Interfaces - Thư mục chứa các interface để định nghĩa các phương thức truy xuất dữ liệu.
    * IGenericRepository.cs - Interface chung cho các repository, cung cấp các phương thức cơ bản như thêm, sửa, xóa, và truy vấn.
    * IUnitOfWork.cs - Interface cho Unit of Work, quản lý và kết hợp các repository trong một giao dịch duy nhất, giúp quản lý việc commit hoặc rollback khi có lỗi.
  * Repositories - Thư mục chứa các lớp triển khai các interface trong `Interfaces`, thực hiện các thao tác truy xuất và thao tác với dữ liệu.
    * GenericRepository.cs - Triển khai repository chung cho các thao tác CRUD cơ bản.
    * UnitOfWork.cs - Triển khai Unit of Work để quản lý các repository và các giao dịch dữ liệu.


Tới đây là đủ để code rồi, có thể coppy từ cái cấu trúc dự án ở trên vào GPT để nó nắm được dự án rồi hỏi

Dành cho ai thắc mắc:
lý do phải viết interface cho các service là để dùng Dependency Injection
ví dụ trong ViewModel cần dùng Service, Service cần dùng UnitOfWork, map, thì khi tạo ViewModel cần tạo Service, mà tạo Service thì cần tạo luôn UnitOfWork
nên khi tạo nó nhìn thế này
public MyNewModel() {
	_myService = new MyService(new UnitOfWork, new MyMapper());
}
và nếu tạo như này thì sẽ gặp các vấn đề về kiểm soát tài nguyên và nhiều vấn đề khác (tìm kiểm DI để tìm hiểu thêm)

lý do phải dùng UnitOfWork chứ không lấy luôn Repo là để quản lý transaction tới db (tìm UnitOfWork pattern để tìm hiểu)

